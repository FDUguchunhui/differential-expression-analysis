ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
ggplot(data = p2_TFT.table) +
geom_point(aes(x =  p2_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap (k)', color = '-log10 FDR q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
ggplot(data = p2_TFT.table) +
geom_point(aes(x =  p2_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap (k)', color = '-log10 FDR q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
p2_TFT.table <- read.xlsx2(file = 'bubbleplot data.xlsx',
sheetName = 'p2_TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
p2_TFT.table$FDR.q.value = -log10(as.numeric(p2_TFT.table$FDR.q.value))
p2_TFT.table$Gene.Set.Name <- factor(p2_TFT.table$Gene.Set.Name,
levels = p2_TFT.table$Gene.Set.Name[order(p2_TFT.table$FDR.q.value)])
ggplot(data = p2_TFT.table) +
geom_point(aes(x =  p2_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap (k)', color = '-log10 FDR q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
ggplot(data = p2_TFT.table) +
geom_point(aes(x =  p2_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap (k)', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
ggplot(data = p2_TFT.table) +
geom_point(aes(x =  p2_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap (k)', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 2),
fill = guide_legend(order = 1)
)
ggplot(data = p2_TFT.table) +
geom_point(aes(x =  p2_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination$FDR.q.value = -log10(as.numeric(five_points_combination$FDR.q.value))
five_points_combination$Gene.Set.Name <- factor(five_points_combination$Gene.Set.Name,
levels = five_points_combination$Gene.Set.Name[order(five_points_combination$FDR.q.value)])
ggplot(data = five_points_combination) +
geom_point(aes(x =  five_points_combination$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
####pattern 2 combination
p2_combination.table <- read.xlsx2(file = 'enrichment share up-regulated genes\\bubbleplot data.xlsx',
sheetName = 'p2_combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
##pattern 2 TFT
p2_TFT.table <- read.xlsx2(file = 'enrichment share up-regulated genes\\bubbleplot data.xlsx',
sheetName = 'p2_TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points .xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination$FDR.q.value = -log10(as.numeric(five_points_combination$FDR.q.value))
five_points_combination$Gene.Set.Name <- factor(five_points_combination$Gene.Set.Name,
levels = five_points_combination$Gene.Set.Name[order(five_points_combination$FDR.q.value)])
ggplot(data = five_points_combination) +
geom_point(aes(x =  five_points_combination$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
five_points_combination$FDR.q.value = -log10(as.numeric(five_points_combination$FDR.q.value))
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points combination
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points TFT
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points TFT
five_points_TFT.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_TFT.table$FDR.q.value = -log10(as.numeric(five_points_TFT.table$FDR.q.value))
five_points_TFT.table$Gene.Set.Name <- factor(five_points_TFT.table$Gene.Set.Name,
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points combination
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points combination
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
five_points_TFT.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_TFT.table$FDR.q.value = -log10(as.numeric(five_points_TFT.table$FDR.q.value))
five_points_TFT.table$Gene.Set.Name <- factor(five_points_TFT.table$Gene.Set.Name,
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points TFT
five_points_TFT.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_TFT.table$FDR.q.value = -log10(as.numeric(five_points_TFT.table$FDR.q.value))
five_points_TFT.table$Gene.Set.Name <- factor(five_points_TFT.table$Gene.Set.Name,
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points TFT
five_points_TFT.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_TFT.table$FDR.q.value = -log10(as.numeric(five_points_TFT.table$FDR.q.value))
five_points_TFT.table$Gene.Set.Name <- factor(five_points_TFT.table$Gene.Set.Name,
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
save.image()
savehistory()
#
listMarts()
ensembl=useMart("ensembl")
#
listMarts()
listDatasets(ensembl)
listFilters(mart)
table_reordered
View(table_reordered)
table_reordered
# omit any row if has missing value
# Caution! this may not the best method
head(table_geneid)
# omit any row if has missing value
# Caution! this may not the best method
head(table_geneid, 5)
# omit any row if has missing value
# Caution! this may not the best method
head(table_geneid)
#check how many gene left in the processed dataset
length(table_nodup$Geneid)
#check whether there is duplicate now, if there is no duplicate, a True should be returen
all(!duplicated(table_nodup[,1]))
table_rownames
class(count_maxtrix)
x <- c(1, 2, 3)
mode(x)
#check whether the name of row match col, a True should be returned
all(rownames(coldata) == colnames(count_maxtrix)[1:15])
rownames(coldata)
rowSums(counts(dds)) >= 10
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds$condition <- factor(dds$condition, levels = c("blood","1h",'2h', '4h', '6h'))
# drop levels that with no sample
dds$condition <- droplevels(dds$condition)
resultsNames(dds)
res$padj < alpha
?typeof
typeof(2)
mode(2)
car <- list(a = c(1, 2, 3), b = (4, 5, 6))
car <- list(a = c(1, 2, 3)  b = (4, 5, 6))
list(a = c(1, 2, 3),  b = (4, 5, 6))
list
?list
c(1, 2, 3)
list(c(1, 2, 3))
list(a = c(1, 2, 3), )
list(a = c(1, 2, 3))
list(a = c(1, 2, 3), b = c(4, 5, 6))
list(a = c(1, 2, 3),  b = (4, 5, 6))
mode(count_maxtrix)
mode(count_maxtrix) <- 'integer'
mode(count_maxtrix)
count_maxtrix
count_maxtrix <- as.matrix(table_rownames)
count_maxtrix
mode(count_maxtrix) <- 'integer'
# make the mode of matrix integer otherwise it will be number
mode(count_maxtrix) <- 'double'
count_maxtrix
LETTERS
baz.C <- function(x) c("C", NextMethod())
ca <- structure(1, class = c("C", "A"))
cb <- structure(1, class = c("C", "B"))
baz(ca)
baz(cb)
baz <- function(x) UseMethod("baz", x)
baz.C <- function(x) c("C", NextMethod())
ca <- structure(1, class = c("C", "A"))
cb <- structure(1, class = c("C", "B"))
baz(ca)
baz(cb)
install.packages("F:/repos/autoHeatmap/autoHeatmap.Rproj", repos = NULL)
install.packages("F:/repos/autoHeatmap/autoHeatmap.Rproj", repos = NULL)
install.packages("F:/repos/autoHeatmap/autoHeatmap.Rproj")
library(autoHeatmap)
dds
dds <- DESeq(dds)
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
library("pheatmap")
dds
View(dds)
dds
dds
View(dds)
countData = count_maxtrix[,1:15]
countData
keep
dds
View(dds)
dds@assays
dds@assays
dds
dds@colData
dds@assays
dds@assays[[".->data"]]
dds@elementMetadata
