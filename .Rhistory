library(xlsx)
library("pheatmap")
autoHeatmap::hmplot(count_matrix = count_matrix, enrichment_xlsx = 'data/overlap.xlsx')
autoHeatmap::hmplot(count_matrix = count_matrix, enrichment_xlsx = 'data/overlap.xlsx')
Q
count_matrix
count_maxtrix <- as.matrix(table_rownames)
# make the mode of matrix integer otherwise it will be number
mode(count_maxtrix) <- 'integer'
head(count_maxtrix)
autoHeatmap::hmplot(count_matrix = count_matrix, enrichment_xlsx = 'data/overlap.xlsx')
count_matrix
autoHeatmap::hmplot(count_matrix = Triblock_counts_normed, enrichment_xlsx = 'data/overlap.xlsx')
Triblock_counts_normed
library(BiocManager)
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
library("pheatmap")
source('F:/repos/Kinetics/Trblock_counts_normed.R')
autoHeatmap::hmplot(count_matrix = Triblock_counts_normed, enrichment_xlsx = 'data/overlap.xlsx')
source('F:/repos/Kinetics/Trblock_counts_normed.R')
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
library("pheatmap")
Trblock_counts_normed <- read_csv('data/Trblock_counts_normed.csv')
# rename the first column to gene_id
Trblock_counts_normed <- select(Trblock_counts_normed, gene_id = X1, everything())
# translate gene_id to gene_name
listMarts()
ensembl=useMart("ensembl")
listDatasets(ensembl)
# mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
# listFilters(mart)
#
# geneid_genename <- getBM(filters= "ensembl_gene_id",
#                   attributes= c("ensembl_gene_id", 'external_gene_name'),
#                   values=Trblock_counts_normed$gene_id,
#                   mart= mart)
#
# table_merge <- sqldf::sqldf('select *
#              from "Trblock_counts_normed"
#              left join geneid_genename on "Trblock_counts_normed".gene_id = geneid_genename.ensembl_gene_id')
# dplyr::select(Geneid1, external_gene_name, everything())
# make gene_id unique by average duplicate
# and reordered
Trblock_counts_normed_unique <- Trblock_counts_normed %>%
group_by(gene_id) %>%
summarize_all(mean) %>%
select(gene_id, HD1_2hr_CF, HD2_2hr_CF, HD3_2hr_CF,
HD1_8hr_CFminus, HD2_8hr_CFminus, HD3_8hr_CFminus,
HD1_8hr_CFplus, HD3_8hr_CFplus,
HD2_2hr_LTB4, HD3_2hr_LTB4)
# check unique
all(!duplicated(Trblock_counts_normed_unique[,1]))
count_maxtrix <- as.matrix(Trblock_counts_normed_unique[,-1])
rownames(count_maxtrix) <- Trblock_counts_normed_unique$gene_id
# make the mode of matrix integer otherwise it will be number
mode(count_maxtrix) <- 'integer'
head(count_maxtrix)
#create the coldata corresponding to the processed dataset
coldata <- data.frame(condition = c(rep('2hr_CF', 3),
rep('8hr_CFminus', 3),
rep('8hr_CFplus', 2),
rep('2hr_LTB4', 2)),
row.names = colnames(count_maxtrix)[1:10])
#check whether the name of row match col, a True should be returned
all(rownames(coldata) == colnames(count_maxtrix)[1:10])
dds <- DESeqDataSetFromMatrix(countData = count_maxtrix[1:10],
colData = coldata,
design = ~ condition)
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# set dds condition with all time points
# set 'blood' as base level, the default base level is determined by alphabet order
# other statement if also available for this purpose
# Caution!: the document only give example for factor with two levels, not sure about accuracy for
#   factor with more than 2 levels
dds$condition <- factor(dds$condition,
levels = c("2hr_CF","8hr_CFminus",'8hr_CFplus','2hr_LTB4'))
# drop levels that with no sample
dds$condition <- droplevels(dds$condition)
# DEseq analysis
dds <- DESeq(dds)
res_minus <- results(dds,contrast=c("condition","2hr_CF","8hr_CFminus"))
res_plus <- results(dds,contrast=c("condition","2hr_CF","8hr_CFplus"))
res_LTB4 <- results(dds,contrast=c("condition","2hr_CF","2hr_LTB4"))
res_subgroup <- function(res, alpha=0.1, reg_LFC=1, reg_dir='all'){
# res is an obj from DEseq2.result function
# alpha gives the significant level for adjusted P-value
# reg gives the regulation level change in log2 fold change in absolute value
# reg_dir gives which regulation direction you want to subset you gene
# three options: all -- up and down
#                up  -- only up regulated
#                down -- only down regulated
res_sig_pos <- (res$padj < alpha)
res_sig_pos[is.na(res_sig_pos)] <- F
if(reg_dir == 'all'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC) | (res$log2FoldChange < -reg_LFC)
}
else if(reg_dir == 'up'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC)
}
else if(reg_dir == 'down'){
res_LFC_pos <- (res$log2FoldChange < -reg_LFC)
}
return(res[res_LFC_pos & res_sig_pos,])
}
#get all 4 upregluated genes
res_list <- list(res_minus = res_minus, res_plus = res_plus, res_LTB4 = res_LTB4)
res_list_up <- lapply(res_list, res_subgroup, reg_dir ='up')
#get all 4 downregluated genes
res_list_down <- lapply(res_list, res_subgroup, reg_dir ='down')
library(xlsx)
write.xlsx2(res_list_up$res_minus, 'output/res_minus_up.xlsx')
write.xlsx2(res_list_up$res_plus, 'output/res_plus_up.xlsx')
write.xlsx2(res_list_up$res_LTB4, 'output/res_LTB4_up.xlsx')
write.xlsx2(res_list_down$res_minus, 'output/res_minus_down.xlsx')
write.xlsx2(res_list_down$res_plus, 'output/res_plus_down.xlsx')
write.xlsx2(res_list_down$res_LTB4, 'output/res_LTB4_down.xlsx')
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
library(foreign)
install.packages('foreign')
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
library("pheatmap")
# run next line if you need to get some help from DESeq2
# browseVignettes("DESeq2")
Trblock_counts_normed <- read_csv('data/Trblock_counts_normed.csv')
# rename the first column to gene_id
Trblock_counts_normed <- select(Trblock_counts_normed, gene_id = X1, everything())
# translate gene_id to gene_name
listMarts()
ensembl=useMart("ensembl")
listDatasets(ensembl)
# mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
# listFilters(mart)
#
# geneid_genename <- getBM(filters= "ensembl_gene_id",
#                   attributes= c("ensembl_gene_id", 'external_gene_name'),
#                   values=Trblock_counts_normed$gene_id,
#                   mart= mart)
#
# table_merge <- sqldf::sqldf('select *
#              from "Trblock_counts_normed"
#              left join geneid_genename on "Trblock_counts_normed".gene_id = geneid_genename.ensembl_gene_id')
# dplyr::select(Geneid1, external_gene_name, everything())
# make gene_id unique by average duplicate
# and reordered
Trblock_counts_normed_unique <- Trblock_counts_normed %>%
group_by(gene_id) %>%
summarize_all(mean) %>%
select(gene_id, HD1_2hr_CF, HD2_2hr_CF, HD3_2hr_CF,
HD1_8hr_CFminus, HD2_8hr_CFminus, HD3_8hr_CFminus,
HD1_8hr_CFplus, HD3_8hr_CFplus,
HD2_2hr_LTB4, HD3_2hr_LTB4)
# check unique
all(!duplicated(Trblock_counts_normed_unique[,1]))
count_maxtrix <- as.matrix(Trblock_counts_normed_unique[,-1])
rownames(count_maxtrix) <- Trblock_counts_normed_unique$gene_id
# make the mode of matrix integer otherwise it will be number
mode(count_maxtrix) <- 'integer'
head(count_maxtrix)
#create the coldata corresponding to the processed dataset
coldata <- data.frame(condition = c(rep('2hr_CF', 3),
rep('8hr_CFminus', 3),
rep('8hr_CFplus', 2),
rep('2hr_LTB4', 2)),
row.names = colnames(count_maxtrix)[1:10])
#check whether the name of row match col, a True should be returned
all(rownames(coldata) == colnames(count_maxtrix)[1:10])
dds <- DESeqDataSetFromMatrix(countData = count_maxtrix[1:10],
colData = coldata,
design = ~ condition)
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# set dds condition with all time points
# set 'blood' as base level, the default base level is determined by alphabet order
# other statement if also available for this purpose
# Caution!: the document only give example for factor with two levels, not sure about accuracy for
#   factor with more than 2 levels
dds$condition <- factor(dds$condition,
levels = c("2hr_CF","8hr_CFminus",'8hr_CFplus','2hr_LTB4'))
# drop levels that with no sample
dds$condition <- droplevels(dds$condition)
# DEseq analysis
dds <- DESeq(dds)
res_minus <- results(dds,contrast=c("condition","2hr_CF","8hr_CFminus"))
res_plus <- results(dds,contrast=c("condition","2hr_CF","8hr_CFplus"))
res_LTB4 <- results(dds,contrast=c("condition","2hr_CF","2hr_LTB4"))
res_subgroup <- function(res, alpha=0.1, reg_LFC=1, reg_dir='all'){
# res is an obj from DEseq2.result function
# alpha gives the significant level for adjusted P-value
# reg gives the regulation level change in log2 fold change in absolute value
# reg_dir gives which regulation direction you want to subset you gene
# three options: all -- up and down
#                up  -- only up regulated
#                down -- only down regulated
res_sig_pos <- (res$padj < alpha)
res_sig_pos[is.na(res_sig_pos)] <- F
if(reg_dir == 'all'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC) | (res$log2FoldChange < -reg_LFC)
}
else if(reg_dir == 'up'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC)
}
else if(reg_dir == 'down'){
res_LFC_pos <- (res$log2FoldChange < -reg_LFC)
}
return(res[res_LFC_pos & res_sig_pos,])
}
#get all 4 upregluated genes
res_list <- list(res_minus = res_minus, res_plus = res_plus, res_LTB4 = res_LTB4)
res_list_up <- lapply(res_list, res_subgroup, reg_dir ='up')
#get all 4 downregluated genes
res_list_down <- lapply(res_list, res_subgroup, reg_dir ='down')
autoHeatmap::hmplot(count_matrix = Triblock_counts_normed, enrichment_xlsx = 'data/overlap.xlsx')
View(count_maxtrix)
View(Trblock_counts_normed)
autoHeatmap::hmplot(count_matrix = Trblock_counts_normed, enrichment_xlsx = 'data/overlap.xlsx')
Trblock_counts_normed
dds <- DESeq(dds)
dds
#plot
autoHeatmap::hmplot(counts(dds, normalized = T))
#plot
autoHeatmap::hmplot(counts(dds, normalized = T), 'data/alpha_amanitin_upregulated_plus.xlsx')
#plot
autoHeatmap::hmplot(counts(dds, normalized = T), 'data/alpha_amanitin_upregulated_plus.xlsx'))
library(autoHeatmap)
detach("package:autoHeatmap", unload = TRUE)
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment_xlsx = 'data/alpha_amanitin_upregulated_plus.csv')
library(autoHeatmap)
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment_xlsx = 'data/alpha_amanitin_upregulated_plus.csv')
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment_xlsx = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap2.pdf')
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
autoHeatmap::hmplot(count_matrix = Trblock_counts_normed, enrichment_xlsx = 'data/overlap.xlsx')
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment_xlsx = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap2.pdf')
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap2.pdf')
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap.pdf')
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap.pdf')
counts(dds, normalized = T)
browseVignettes(DESeq2)
browseVignettes(DEseq2)
browseVignettes('DEseq2')
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
browseVignettes('DEseq2')
browseVignettes('DESeq2')
pheatmap(counts(dds, normalized = T))
heatmap.2(counts(dds, normalized = T))
pheatmap(counts(dds, normalized = T), annotation_row = F)
heatmap.2(counts(dds, normalized = T), dendrogram = 'column')
Trblock_counts <- read_csv('data/Trblockade_orgin.csv')
Trblock_counts
# rename the first column to gene_id
Trblock_counts <- select(Trblock_counts_normed, gene_id = X1, everything())
# rename the first column to gene_id
Trblock_counts <- select(Trblock_counts_normed, gene_id = `GENE ID`, everything())
# rename the first column to gene_id
Trblock_counts <- select(Trblock_counts_normed, gene_id = 'GENE ID', everything())
# rename the first column to gene_id
Trblock_counts <- select(Trblock_counts, gene_id = `GENE ID``, everything())
# rename the first column to gene_id
Trblock_counts <- select(Trblock_counts, gene_id = `GENE ID`, everything())
select(Trblock_counts, gene_id = `GENE ID`, everything())
# rename the first column to gene_id
Trblock_counts <- select(Trblock_counts, gene_id = `GENE ID`, everything()) %>%
filter(is.na())
# rename the first column to gene_id
Trblock_counts <- select(Trblock_counts, gene_id = `GENE ID`, everything()) %>%
drop_na()
Trblock_counts
source('F:/repos/Kinetics/Trblock_counts_normed.R')
source('F:/repos/Kinetics/Trblock_counts_normed.R')
trace()
traceback()
Trblock_counts <- read_csv('data/Trblockade_orgin.csv')
# rename the first column to gene_id
Trblock_counts <- select(Trblock_counts, gene_id = `GENE ID`, everything()) %>%
drop_na()
Trblock_counts_unique <- Trblock_counts %>%
group_by(gene_id) %>%
summarize_all(mean) %>%
select(gene_id, HD1_2hr_CF, HD2_2hr_CF, HD3_2hr_CF,
HD1_8hr_CFminus, HD2_8hr_CFminus, HD3_8hr_CFminus,
HD1_8hr_CFplus, HD3_8hr_CFplus,
HD2_2hr_LTB4, HD3_2hr_LTB4)
# check unique
all(!duplicated(Trblock_counts_unique[,1]))
count_maxtrix <- as.matrix(Trblock_counts_unique[,-1])
rownames(count_maxtrix) <- Trblock_counts_unique$gene_id
mode(count_maxtrix) <- 'integer'
head(count_maxtrix)
#create the coldata corresponding to the processed dataset
coldata <- data.frame(condition = c(rep('2hr_CF', 3),
rep('8hr_CFminus', 3),
rep('8hr_CFplus', 2),
rep('2hr_LTB4', 2)),
row.names = colnames(count_maxtrix)[1:10])
all(rownames(coldata) == colnames(count_maxtrix)[1:10])
dds <- DESeqDataSetFromMatrix(countData = count_maxtrix[1:10],
colData = coldata,
design = ~ condition)
count_maxtrix[1:10]
count_maxtrix
dds <- DESeqDataSetFromMatrix(countData = count_maxtrix[,1:10],
colData = coldata,
design = ~ condition)
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds
# data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# set dds condition with all time points
# set 'blood' as base level, the default base level is determined by alphabet order
# other statement if also available for this purpose
# Caution!: the document only give example for factor with two levels, not sure about accuracy for
#   factor with more than 2 levels
dds$condition <- factor(dds$condition,
levels = c("2hr_CF","8hr_CFminus",'8hr_CFplus','2hr_LTB4'))
# drop levels that with no sample
dds$condition <- droplevels(dds$condition)
# DEseq analysis
dds <- DESeq(dds)
res_minus <- results(dds,contrast=c("condition","2hr_CF","8hr_CFminus"))
res_plus <- results(dds,contrast=c("condition","2hr_CF","8hr_CFplus"))
res_LTB4 <- results(dds,contrast=c("condition","2hr_CF","2hr_LTB4"))
res_subgroup <- function(res, alpha=0.1, reg_LFC=1, reg_dir='all'){
# res is an obj from DEseq2.result function
# alpha gives the significant level for adjusted P-value
# reg gives the regulation level change in log2 fold change in absolute value
# reg_dir gives which regulation direction you want to subset you gene
# three options: all -- up and down
#                up  -- only up regulated
#                down -- only down regulated
res_sig_pos <- (res$padj < alpha)
res_sig_pos[is.na(res_sig_pos)] <- F
if(reg_dir == 'all'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC) | (res$log2FoldChange < -reg_LFC)
}
else if(reg_dir == 'up'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC)
}
else if(reg_dir == 'down'){
res_LFC_pos <- (res$log2FoldChange < -reg_LFC)
}
return(res[res_LFC_pos & res_sig_pos,])
}
#get all 4 upregluated genes
res_list <- list(res_minus = res_minus, res_plus = res_plus, res_LTB4 = res_LTB4)
res_list_up <- lapply(res_list, res_subgroup, reg_dir ='up')
#get all 4 downregluated genes
res_list_down <- lapply(res_list, res_subgroup, reg_dir ='down')
library(xlsx)
write.xlsx2(res_list_up$res_minus, 'output/res_minus_up.xlsx')
write.xlsx2(res_list_up$res_plus, 'output/res_plus_up.xlsx')
write.xlsx2(res_list_up$res_LTB4, 'output/res_LTB4_up.xlsx')
write.xlsx2(res_list_down$res_minus, 'output/res_minus_down.xlsx')
write.xlsx2(res_list_down$res_plus, 'output/res_plus_down.xlsx')
write.xlsx2(res_list_down$res_LTB4, 'output/res_LTB4_down.xlsx')
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap.pdf')
#plot
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap.pdf')
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap1.pdf')
dev.off()
autoHeatmap::hmplot(counts(dds, normalized = T),
enrichment = 'data/alpha_amanitin_upregulated_plus.csv', file = 'heatmap1.pdf')
mean(counts(dds, normalized = T))
counts(dds, normalized = T)
max(dds, normalized = T)
max(counts((dds, normalized = T))
max(counts((dds, normalized = T)
counts((dds, normalized = T)
counts(dds, normalized = T)
max(counts(dds, normalized = T))
write.xlsx2(res_list_up$res_minus, 'output/res_minus_up.xlsx')
write.xlsx2(res_list_up$res_plus, 'output/res_plus_up.xlsx')
write.xlsx2(res_list_up$res_LTB4, 'output/res_LTB4_up.xlsx')
write.xlsx2(res_list_down$res_minus, 'output/res_minus_down.xlsx')
write.xlsx2(res_list_down$res_plus, 'output/res_plus_down.xlsx')
write.xlsx2(res_list_down$res_LTB4, 'output/res_LTB4_down.xlsx')
library(autoHeatmap)
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
res_list_up <- lapply(res_list, res_subgroup, reg_dir ='up')
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
res_list_up <- lapply(res_list, autoHeatmap::res_subgroup, reg_dir ='up')
res_minus_plus <- results(dds,contrast=c("condition","8hr_CFminus","8hr_CFplus"))
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
library(autoHeatmap) #inhouse package
library("pheatmap")
dds <- DESeq(dds)
res_minus_plus <- results(dds,contrast=c("condition","8hr_CFminus","8hr_CFplus"))
#get all 4 upregluated genes
res_list <- list(res_minus_plus = res_minus_plus, res_minus = res_minus, res_plus = res_plus, res_LTB4 = res_LTB4)
res_list_up <- lapply(res_list, autoHeatmap::res_subgroup, reg_dir ='up')
#get all 4 downregluated genes
res_list_down <- lapply(res_list, autoHeatmap::res_subgroup, reg_dir ='down')
write.xlsx2(res_list_up$res_minus_plus, 'output/res_minus_plus_up.xlsx')
write.xlsx2(res_list_up$res_minus_plus, 'output/res_minus_plus_up.xlsx')
write.xlsx2(res_list_up$res_minus_plus, 'output/res_minus_plus_up.xlsx')
write.xlsx2(res_list_up$res_minus_plus, 'output/res_minus_plus_down.xlsx')
devtools::load_all()
# check unique
all(!duplicated(Trblock_counts_unique[,1]))
duplicated(Trblock_counts_unique[,1])
View(Trblock_counts_unique)
Trblock_counts
all(!duplicated(Trblock_counts_unique[,1]))
source('F:/repos/Kinetics/Trblock_counts_normed.R')
# DEseq analysis
dds <- DESeq(dds)
res_minus_plus <- results(dds,contrast=c("condition","8hr_CFminus","8hr_CFplus"))
#get all 4 upregluated genes
res_list <- list(res_minus_plus = res_minus_plus, res_minus = res_minus, res_plus = res_plus, res_LTB4 = res_LTB4)
res_list_up <- lapply(res_list, autoHeatmap::res_subgroup, reg_dir ='up')
#get all 4 downregluated genes
res_list_down <- lapply(res_list, autoHeatmap::res_subgroup, reg_dir ='down')
write.xlsx2(res_list_up$res_minus_plus, 'output/res_minus_plus_up.xlsx')
write.xlsx2(res_list_up$res_minus_plus, 'output/res_minus_plus_down.xlsx')
pchisq(4.455, 1)
pchisq(0.046, 1)
1 - pchisq(0.046, 1)
1 - pchisq(0.047, 1)
1 - pchisq(4.455, 1)
pbinom(1, 0.5)
pbinom(1,size = 11, 0.5)
pbinom(2,size = 11, 0.5)
pbinom(2,size = 11, 0.5) * 2
#this option assigns more RAM for java to enable high-RAM-comsuming processing
# especially in writing large dataset to .xlxs
options(java.parameters = "-Xmx4048m")
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
library("pheatmap")
BiocManager::install('biomaRt')
library(biomaRt)
library(pheatmap)
library(pheatmap)
install.packages("pheatmap")
