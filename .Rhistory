sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
##pattern 2 TFT
p2_TFT.table <- read.xlsx2(file = 'enrichment share up-regulated genes\\bubbleplot data.xlsx',
sheetName = 'p2_TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points .xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination$FDR.q.value = -log10(as.numeric(five_points_combination$FDR.q.value))
five_points_combination$Gene.Set.Name <- factor(five_points_combination$Gene.Set.Name,
levels = five_points_combination$Gene.Set.Name[order(five_points_combination$FDR.q.value)])
ggplot(data = five_points_combination) +
geom_point(aes(x =  five_points_combination$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
five_points_combination$FDR.q.value = -log10(as.numeric(five_points_combination$FDR.q.value))
# 5-points combination
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
# 5-points combination
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'pattern 2 TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points combination
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points TFT
five_points_combination.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points TFT
five_points_TFT.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_TFT.table$FDR.q.value = -log10(as.numeric(five_points_TFT.table$FDR.q.value))
five_points_TFT.table$Gene.Set.Name <- factor(five_points_TFT.table$Gene.Set.Name,
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points combination
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points combination
five_points_combination.table.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'Combination',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_combination.table$FDR.q.value = -log10(as.numeric(five_points_combination.table$FDR.q.value))
five_points_combination.table$Gene.Set.Name <- factor(five_points_combination.table$Gene.Set.Name,
levels = five_points_combination.table$Gene.Set.Name[order(five_points_combination.table$FDR.q.value)])
ggplot(data = five_points_combination.table) +
geom_point(aes(x =  five_points_combination.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
five_points_TFT.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_TFT.table$FDR.q.value = -log10(as.numeric(five_points_TFT.table$FDR.q.value))
five_points_TFT.table$Gene.Set.Name <- factor(five_points_TFT.table$Gene.Set.Name,
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points TFT
five_points_TFT.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_TFT.table$FDR.q.value = -log10(as.numeric(five_points_TFT.table$FDR.q.value))
five_points_TFT.table$Gene.Set.Name <- factor(five_points_TFT.table$Gene.Set.Name,
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
# 5-points TFT
five_points_TFT.table <- read.xlsx2(file = 'enrichment intersection 5 time points genes\\bubbleplot five points.xlsx',
sheetName = 'TFT',
colClasses = c('character','numeric','character', rep('numeric', 4))
)
five_points_TFT.table$FDR.q.value = -log10(as.numeric(five_points_TFT.table$FDR.q.value))
five_points_TFT.table$Gene.Set.Name <- factor(five_points_TFT.table$Gene.Set.Name,
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'Combination', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
levels = five_points_TFT.table$Gene.Set.Name[order(five_points_TFT.table$FDR.q.value)])
ggplot(data = five_points_TFT.table) +
geom_point(aes(x =  five_points_TFT.table$Gene.Set.Name, y='', size =  X..Genes.in.Overlap..k., color = FDR.q.value)) +
coord_flip() +
labs(title = 'TFT', size = '# of Genes in Overlap', color = '-log10 q value') +
ylab('') +
xlab('Genes') +
scale_colour_gradient(low = "lightsteelblue1", high = "blue4") +
guides(
color = guide_colorbar(order = 0),
fill = guide_legend(order = 1)
)
save.image()
savehistory()
#
listMarts()
ensembl=useMart("ensembl")
#
listMarts()
listDatasets(ensembl)
listFilters(mart)
table_reordered
View(table_reordered)
table_reordered
# omit any row if has missing value
# Caution! this may not the best method
head(table_geneid)
# omit any row if has missing value
# Caution! this may not the best method
head(table_geneid, 5)
# omit any row if has missing value
# Caution! this may not the best method
head(table_geneid)
#check how many gene left in the processed dataset
length(table_nodup$Geneid)
#check whether there is duplicate now, if there is no duplicate, a True should be returen
all(!duplicated(table_nodup[,1]))
table_rownames
class(count_maxtrix)
x <- c(1, 2, 3)
mode(x)
#check whether the name of row match col, a True should be returned
all(rownames(coldata) == colnames(count_maxtrix)[1:15])
rownames(coldata)
rowSums(counts(dds)) >= 10
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds$condition <- factor(dds$condition, levels = c("blood","1h",'2h', '4h', '6h'))
# drop levels that with no sample
dds$condition <- droplevels(dds$condition)
resultsNames(dds)
res$padj < alpha
?typeof
typeof(2)
mode(2)
car <- list(a = c(1, 2, 3), b = (4, 5, 6))
car <- list(a = c(1, 2, 3)  b = (4, 5, 6))
list(a = c(1, 2, 3),  b = (4, 5, 6))
list
?list
c(1, 2, 3)
list(c(1, 2, 3))
list(a = c(1, 2, 3), )
list(a = c(1, 2, 3))
list(a = c(1, 2, 3), b = c(4, 5, 6))
list(a = c(1, 2, 3),  b = (4, 5, 6))
mode(count_maxtrix)
mode(count_maxtrix) <- 'integer'
mode(count_maxtrix)
count_maxtrix
count_maxtrix <- as.matrix(table_rownames)
count_maxtrix
mode(count_maxtrix) <- 'integer'
# make the mode of matrix integer otherwise it will be number
mode(count_maxtrix) <- 'double'
count_maxtrix
LETTERS
baz.C <- function(x) c("C", NextMethod())
ca <- structure(1, class = c("C", "A"))
cb <- structure(1, class = c("C", "B"))
baz(ca)
baz(cb)
baz <- function(x) UseMethod("baz", x)
baz.C <- function(x) c("C", NextMethod())
ca <- structure(1, class = c("C", "A"))
cb <- structure(1, class = c("C", "B"))
baz(ca)
baz(cb)
install.packages("F:/repos/autoHeatmap/autoHeatmap.Rproj", repos = NULL)
install.packages("F:/repos/autoHeatmap/autoHeatmap.Rproj", repos = NULL)
install.packages("F:/repos/autoHeatmap/autoHeatmap.Rproj")
library(autoHeatmap)
dds
dds <- DESeq(dds)
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
library("pheatmap")
dds
View(dds)
dds
dds
View(dds)
countData = count_maxtrix[,1:15]
countData
keep
dds
View(dds)
dds@assays
dds@assays
dds
dds@colData
dds@assays
dds@assays[[".->data"]]
dds@elementMetadata
dds
dds
dds
View(dds)
dds@elementMetadata
dds@assays
dds <- DESeq(dds)
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the following line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
library("pheatmap")
dds <- DESeq(dds)
dds
View(dds)
dds@assays[[".->data"]]
dds@assays[["data"]]
dds@elementMetadata
View(dds)
View(dds)
dds <- DESeqDataSetFromMatrix(countData = count_maxtrix[,1:15],
colData = coldata,
design = ~ condition)
dds <- DESeqDataSetFromMatrix(countData = count_maxtrix[,1:15],
colData = coldata,
design = ~ condition)
dds <- DESeqDataSetFromMatrix(countData = count_maxtrix[,1:15],
colData = coldata,
design = ~ condition)
dds
vignette("DESeq2")
html_vignette('DESeq2')
browseVignettes("DESeq2")
View(res_1h)
View(res_1h)
res_1h
mcols
?mcols
counts(dds, normalized=TRUE)
dds <- estimateSizeFactors(dds)
counts(dds, normalized=TRUE)
？estimateSizeFactors
?estimateSizeFactors
estimateSizeFactors(dds)
count_maxtrix
setwd('..')
devtools::load_all()
dds
counts(dds, normalized=TRUE)
dput(head(counts(dds, normalized=TRUE)))
structure(c(6.99661945911264, 3.49830972955632, 0, 15.7423937830034,
0, 3.49830972955632, 0, 3.15724492205154, 0, 26.8365818374381,
0, 1.57862246102577, 0, 6.30815899913583, 0, 6.30815899913583,
0, 0, 0, 2.52250665201215, 0, 5.04501330402429, 0, 2.52250665201215,
0, 1.4997203269171, 0, 3.74930081729275, 1.4997203269171, 0,
0, 0, 0, 11.3720002412405, 0, 0, 0, 1.77669197398064, 0, 3.55338394796128,
1.18446131598709, 0, 0, 14.6714034809653, 0.611308478373554,
0, 1.22261695674711, 1.22261695674711, 0, 3.77317309936199, 0,
5.65975964904299, 0, 0, 0, 4.12851339147534, 0, 0, 7.56894121770479,
1.37617113049178, 0, 6.67421282692028, 0.889895043589371, 0.444947521794685,
1.77979008717874, 3.55958017435748, 0, 0, 0, 3.32619309493015,
0, 28.2726413069062, 0, 9.14789027415791, 0, 0, 1.21971870322106,
1.21971870322106, 1.2047836515391, 7.83109373500418, 0, 0, 4.21674278038686,
0, 1.89525634322924, 3.79051268645847, 1.89525634322924, 0, 3.79051268645847,
0.947628171614618), .Dim = c(6L, 15L), .Dimnames = list(c("A1BG",
"A1BG-AS1", "A1CF", "A2M", "A2M-AS1", "A2ML1"), c("HD1_Blood",
"HD2_Blood", "HD6_Blood", "HD1_1H", "HD2_1H", "HD6_1H", "HD1_2H",
"HD2_2H", "HD6_2H", "HD1_4H", "HD2_4H", "HD6_4H", "HD1_6H", "HD2_6H",
"HD6_6H")))
dput(head(counts(dds, normalized=TRUE), 1000))
library(autoHeatmap)
hmplot()
hmplot(counts(dds, normalized=TRUE))
library(autoHeatmap)
hmplot(counts(dds, normalized=TRUE))
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
library(autoHeatmap)
hmplot(counts(dds, normalized=TRUE))
hmplot(counts(dds, normalized=TRUE), 'data/example.xlsx')
setwd("F:/repos/Kinetics")
hmplot(counts(dds, normalized=TRUE), 'data/example.xlsx')
traceback()
hmplot(counts(dds, normalized=TRUE), 'data/example.xlsx')
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
hmplot(counts(dds, normalized=TRUE), 'data/example.xlsx')
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
hmplot(counts(dds, normalized=TRUE), 'data/example.xlsx')
#       lfc.1h = res_1h$log2FoldChange,
#       lfc.2h = res_2h$log2FoldChange,
#       lfc.4h = res_4h$log2FoldChange,
#       lfc.6h =res_6h$log2FoldChange)
#
# gene_intsc_heatmap.tibble <- lfc_ts_expr.tibble %>%
#   dplyr::filter(gene_name %in% gene_intsc.table[,1])
# gene_intsc_heatmap.matrix <- as.matrix(gene_intsc_heatmap.tibble[,2:5])
# rownames(gene_intsc_heatmap.matrix) <- as.vector(as.list((gene_intsc_heatmap.tibble[,1]))[[1]])
#
pheatmap(gene_intsc_heatmap.matrix, cluster_cols = F)
#       lfc.2h = res_2h$log2FoldChange,
#       lfc.4h = res_4h$log2FoldChange,
#       lfc.6h =res_6h$log2FoldChange)
#
# gene_intsc_heatmap.tibble <- lfc_ts_expr.tibble %>%
#   dplyr::filter(gene_name %in% gene_intsc.table[,1])
# gene_intsc_heatmap.matrix <- as.matrix(gene_intsc_heatmap.tibble[,2:5])
# rownames(gene_intsc_heatmap.matrix) <- as.vector(as.list((gene_intsc_heatmap.tibble[,1]))[[1]])
#
# pheatmap(gene_intsc_heatmap.matrix, cluster_cols = F)
heatmap.2(gene_intsc_heatmap.matrix, Colv = FALSE)
write.csv(x = counts(dds, normalized=TRUE), file = )
write.csv(x = counts(dds, normalized=TRUE), ddd)
getwd
getwd()
write.csv(x = counts(dds, normalized=TRUE), 'count_matrix.csv')
autoHeatmap::hmplot('data/example.xlsx', count_matrix = counts(dds, normalized=TRUE))
library(autoHeatmap)
autoHeatmap::hmplot('data/example.xlsx', count_matrix = counts(dds, normalized=TRUE))
library('DESeq2')
autoHeatmap::hmplot('data/example.xlsx', count_matrix = counts(dds, normalized=TRUE))
library(autoHeatmap)
autoHeatmap::hmplot('data/example.xlsx', count_matrix = counts(dds, normalized=TRUE))
detach("package:autoHeatmap", unload = TRUE)
library(autoHeatmap)
autoHeatmap::hmplot('data/example.xlsx', count_matrix = counts(dds, normalized=TRUE))
pchisq(3.012, 3)
1 - pchisq(3.012, 3)
