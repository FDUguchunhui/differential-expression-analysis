res_all[upreg[upreg$Names = '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]]
res_all[upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]]
res_all
res_all[res_all$gene_id %in% upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]
upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up'
res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,]
res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements
res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,]
upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements
upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up'
upreg %>% as_tibble() %>% fill(`Names`, .direction = c("down"))
upreg <- upreg %>% as_tibble() %>% fill(`Names`, .direction = c("down"))
res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,]
upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements
res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,]
res_all[upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,]
duplicated(res_all$gene_id)
all(!duplicated(res_all$gene_id))
res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,]
length(res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,])
nrow(res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,])
length(upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up'])
length(upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up'],)
length(upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',])
(upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',])
length(upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements)
nrow(res_all[res_all$gene_id %in% intsc_1246_up,])
res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,]
nrow(res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,])
res_all[res_all$gene_id %in% set_124,]
length(res_all[res_all$gene_id %in% set_124,])
nrow(res_all[res_all$gene_id %in% set_124,])
res_all[res_all$gene_id %in% intsc_1246_up,]
nrow(res_all[res_all$gene_id %in% intsc_1246_up,])
res_all[res_all$gene_id %in% upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements,]
View(upreg)
upreg[upreg$Names == '1 Hour Up 2 Hours Up 4 Hours Up 6 Hours Up',]$elements == intsc_1246_up
factor(upreg$Names)
llevels(upreg$Names)
levels(upreg$Names)
levels(factor(upreg$Names))
combo <- levels(factor(upreg$Names))
up_comb <- list()
for(i in 1:length(combo)){
up_comb[[i]] <- res_all[res_all$gene_id %in% upreg[upreg$Names == comb[i],]$elements,]
}
combo <- levels(factor(upreg$Names))
up_comb <- list()
for(i in 1:length(combo)){
up_comb[[i]] <- res_all[res_all$gene_id %in% upreg[upreg$Names == combo[i],]$elements,]
}
up_comb
nrow(up_comb[[1]])
nrow(up_comb[[2]])
up_comb[[1]]
combo
combo <- levels(factor(upreg$Names, ordered = T))
combo
combo <- levels(factor(upreg$Names, ordered = T))
factor(upreg$Names, ordered = T)
combo <- levels(factor(upreg$Names))
combo <- levels(factor(upreg$Names, levels = unique(upreg$Names)))
combo
for(i in 1:length(combo)){
up_comb[[i]] <- res_all[res_all$gene_id %in% upreg[upreg$Names == combo[i],]$elements,]
}
nrow(up_comb[[1]])
for(i in 1:length(combo)){
write.xlsx(up_comb,  sheetName = combo[[i]],
file = 'output/up_comb.xlsx'))
}
for(i in 1:length(combo)){
write.xlsx(up_comb,  sheetName = combo[[i]],
file = 'output/up_comb.xlsx')
}
for(i in 1:length(combo)){
write.xlsx(up_comb[[i]],  sheetName = combo[[i]],
file = 'output/up_comb.xlsx')
}
for(i in 1:length(combo)){
write.xlsx(up_comb[[i]],  sheetName = combo[[i]],
file = 'output/up_comb.xlsx', append = T)
}
combo
for(i in 1:length(combo)){
write.xlsx(up_comb[[i]],  sheetName = combo[[i]],
file = 'output/up_comb.xlsx', append = T)
}
{
write.xlsx(up_comb[[1]],  sheetName = combo[[1]],
file = 'output/up_comb.xlsx')
for(i in 2:length(combo)){
write.xlsx(up_comb[[i]],  sheetName = combo[[i]],
file = 'output/up_comb.xlsx', append = T)
}
}
combo
for(i in 1:length(combo)){
write.xlsx(up_comb[[i]],  sheetName = sub('Hours', '', combo)[[i]],
file = 'output/up_comb.xlsx', append = T)
}
for(i in 1:length(combo)){
write.xlsx(up_comb[[i]],  sheetName = sub('Hours', '', combo)[[i]],  # the sheetname is short
file = 'output/up_comb.xlsx', append = T)
}
downreg <- read.xlsx(file = 'Venn_Downregulated.xlsx', sheetIndex = 1, stringsAsFactors = F)
downreg <- downreg %>% as_tibble() %>% fill(`Names`, .direction = c("down"))
combo_down <- levels(factor(upreg$Names, levels = unique(upreg$Names)))
downreg <- read.xlsx(file = 'Venn_Downregulated.xlsx', sheetIndex = 1, stringsAsFactors = F)
downreg <- read.xlsx(file = 'data/Venn_Downregulated.xlsx', sheetIndex = 1, stringsAsFactors = F)
downreg <- downreg %>% as_tibble() %>% fill(`Names`, .direction = c("down"))
combo_down <- levels(factor(upreg$Names, levels = unique(upreg$Names)))
down_comb <- list()
for(i in 1:length(combo_down)){
down_comb[[i]] <- res_all[res_all$gene_id %in% downreg[downreg$Names == combo_down[i],]$elements,]
}
#
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('Hours', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
down_comb <- list()
for(i in 1:length(combo_down)){
down_comb[[i]] <- res_all[res_all$gene_id %in% downreg[downreg$Names == combo_down[i],]$elements,]
}
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('Hours', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
length(combo_down)
combo_down
downreg <- read.xlsx(file = 'data/Venn_Downregulated.xlsx', sheetIndex = 1, stringsAsFactors = F)
downreg <- downreg %>% as_tibble() %>% fill(`Names`, .direction = c("down"))
combo_down <- levels(factor(downreg$Names, levels = unique(upreg$Names)))
down_comb <- list()
for(i in 1:length(combo_down)){
down_comb[[i]] <- res_all[res_all$gene_id %in% downreg[downreg$Names == combo_down[i],]$elements,]
}
#
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('Hours', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
down_comb <- list()
for(i in 1:length(combo_down)){
down_comb[[i]] <- res_all[res_all$gene_id %in% downreg[downreg$Names == combo_down[i],]$elements,]
}
#
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('Hours', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
down_comb[[i]]
down_comb[[1]]
downreg[downreg$Names == combo_down[i],]$elements
downreg[downreg$Names == combo_down[1],]$elements
downreg$Names
combo_down[i]
downreg <- read.xlsx(file = 'data/Venn_Downregulated.xlsx', sheetIndex = 1, stringsAsFactors = F)
downreg <- downreg %>% as_tibble() %>% fill(`Names`, .direction = c("down"))
combo_down <- levels(factor(downreg$Names, levels = unique(downreg$Names)))
down_comb <- list()
for(i in 1:length(combo_down)){
down_comb[[i]] <- res_all[res_all$gene_id %in% downreg[downreg$Names == combo_down[i],]$elements,]
}
#
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('Hours', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
downreg <- read.xlsx(file = 'data/Venn_Downregulated.xlsx', sheetIndex = 1, stringsAsFactors = F)
downreg <- downreg %>% as_tibble() %>% fill(`Names`, .direction = c("down"))
combo_down <- levels(factor(downreg$Names, levels = unique(downreg$Names)))
down_comb <- list()
for(i in 1:length(combo_down)){
down_comb[[i]] <- res_all[res_all$gene_id %in% downreg[downreg$Names == combo_down[i],]$elements,]
}
#
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('Hours', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
sub('Hours', '', combo_down)
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('hours', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
sub('hours', '', combo_down)
write.xlsx(down_comb[[i]],  sheetName = sub('hour', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('hour', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('hour', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
sub('hour', '', combo_down)
#
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('hour.*', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('hour.*', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
sub('hour.*', '', combo_down)
#
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = sub('hour[s]*', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
sub('hour[s]*', '', combo_down)
sheetName = gsub('hour[s]*', '', combo_down)
gsub('hour[s]*', '', combo_down)
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = gsub('hour[s]*', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
for(i in 1:length(combo_down)){
write.xlsx(down_comb[[i]],  sheetName = gsub('hour[s]*', '', combo_down)[[i]],  # the sheetname is short
file = 'output/down_comb.xlsx', append = T)
}
source('E:/data/repos/Kinetics/R/Trblockade_orgin.R', echo=TRUE)
# set dds condition with all time points
# set 'blood' as base level, the default base level is determined by alphabet order
# other statement if also available for this purpose
# Caution!: the document only give example for factor with two levels, not sure about accuracy for
#   factor with more than 2 levels
dds$condition <- factor(dds$condition, levels = c("2hr_CF","1h",'2h', '4h', '6h'))
dds$condition
condition
colData
coldata
count_matrix
max(count_matrix)
2^64
log2(1437399)
2^16
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
normalized_counts
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
normalized_counts
## subset gene
read_table(file = data/geneset.txt, skip = 2)
## subset gene
read_table(file = 'data/geneset.txt', skip = 2)
## subset gene
read_table(file = 'data/geneset.txt', skip = 2, col_names = 'gene name')
## subset gene
read_table(file = 'data/geneset.txt', skip = 2, col_names = 'gene name',
col_types = cols(
`gene name` = col_character()
))
pull(gene_name)
## subset gene
gene_name <- read_table(file = 'data/geneset.txt', skip = 2, col_names = 'gene name',
col_types = cols(
`gene name` = col_character()
))
pull(gene_name)
normalized_counts
pos <- colnames(normalized_counts) %in% pull(gene_name)
normalized_counts[pos,]
normalized_counts[,pos]
normalized_counts[pos,]
pos <- colnames(normalized_counts) %in% pull(gene_name)
normalized_counts[pos,]
pos <- rownames(normalized_counts) %in% pull(gene_name)
normalized_counts[pos,]
normalized_counts <- subnormalized_counts[pos,]
pos <- rownames(normalized_counts) %in% pull(gene_name)
normalized_counts_sub <- subnormalized_counts[pos,]
normalized_counts_sub <- normalized_counts[pos,]
write.xlsx2(x = normalized_counts_sub, file = 'output/normalized_counts_sub.xlsx')
normalized_counts_sub
source('E:/data/repos/Kinetics/R/kinetics/kinetics.R', echo=TRUE)
gene_name <- read_table(file = 'data/geneset.txt', skip = 2, col_names = 'gene name',
col_types = cols(
`gene name` = col_character()
))
# get normalized data
# dds is a reusable name, take care which dds you use
counts(dds, normalized=TRUE)
# get normalized data
# dds is a reusable name, take care which dds you use
normalized_counts <- counts(dds, normalized=TRUE)
# get normalized data
# dds is a reusable name, take care which dds you use
normalized_counts <- counts(dds, normalized=TRUE)
write.xlsx2(x = normalized_counts_sub, file = 'output/ts_normalized_counts_sub.xlsx')
pos <- rownames(normalized_counts) %in% pull(gene_name)
normalized_counts_sub <- normalized_counts[pos,]
write.xlsx2(x = normalized_counts_sub, file = 'output/ts_normalized_counts_sub.xlsx')
source('E:/data/repos/Kinetics/R/Deff_expr_10h.R', echo=TRUE)
source('E:/data/repos/Kinetics/R/Deff_expr_10h.R', echo=TRUE)
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the followiing line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
# run next line if you need to get some help from DESeq2
# browseVignettes("DESeq2")
#this option assigns more RAM for java to enable high-RAM-comsuming processing
# especially in writing large dataset to .xlxs
# memory.limit(102400)
options(java.parameters = "-Xmx6048m")
source('E:/data/repos/Kinetics/R/Deff_expr_10h.R', echo=TRUE)
options(java.parameters = "-Xmx6048m")
gene_expr_10h.table <- read.xlsx2('data/10hr_normed_counts.xlsx', sheetName = 'counts', stringsAsFactors = F,
colClasses = c('character', rep('numeric', 16)))
gene_expr_10h.tibble <- as_tibble(gene_expr_10h.table)
#Check all unique
all(!duplicated(gene_expr_10h.tibble[,1]))
#use the geneid as row.names
gene_10h.table_rownames <- data.frame(gene_expr_10h.tibble[,-1], row.names=gene_expr_10h.table[,1])
gene_10h.count_maxtrix <- as.matrix(gene_10h.table_rownames)
gene_10h.count_maxtrix <- round(gene_10h.count_maxtrix)
# make the mode of matrix integer otherwise it will be number
head(gene_10h.count_maxtrix)
gene_10h.coldata <- data.frame(condition = c(rep('blood', 4),
rep('LTB4_TM', 5),
rep('CFASN_TM', 5),
rep('CFASN_inc', 2)),
row.names = colnames(gene_10h.count_maxtrix[,1:16]))
all(rownames(gene_10h.coldata) == colnames(gene_10h.count_maxtrix[1:16]))
#create DESeqDataSet(dds) object, dds is a container for intermediate data
gene_10h.dds <- DESeqDataSetFromMatrix(countData = gene_10h.count_maxtrix[,1:16],
colData = gene_10h.coldata,
design = ~ condition)
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(gene_10h.dds)) >= 10
gene_10h.dds <- gene_10h.dds[keep,]
# set dds condition with all time points
# set 'blood' as base level, the default base level is determined by alphabet order
# other statement if also available for this purpose
# Caution!: the document only give example for factor with two levels, not sure about accuracy for
#   factor with more than 2 levels
gene_10h.dds$condition <- factor(gene_10h.dds$condition, levels = c("blood","LTB4_TM",'CFASN_TM', 'CFASN_inc'))
# drop levels that with no sample
gene_10h.dds$condition <- droplevels(gene_10h.dds$condition)
gene_expr_10h.table <- read.xlsx2('data/10hr_normed_counts.xlsx', sheetName = 'counts', stringsAsFactors = F,
colClasses = c('character', rep('numeric', 16)))
gene_expr_10h.tibble <- as_tibble(gene_expr_10h.table)
#Check all unique
all(!duplicated(gene_expr_10h.tibble[,1]))
gene_expr_10h.table <- read.xlsx2('data/10hr_normed_counts.xlsx', sheetName = 'counts', stringsAsFactors = F,
colClasses = c('character', rep('numeric', 16)))
#this option assigns more RAM for java to enable high-RAM-comsuming processing
# especially in writing large dataset to .xlxs
memory.limit(102400)
options(java.parameters = "-Xmx6048m")
#this option assigns more RAM for java to enable high-RAM-comsuming processing
# especially in writing large dataset to .xlxs
memory.limit(1024000)
memory.size() r
memory.size()\
memory.size()
memory.size(F)
memory.size(T)
#this option assigns more RAM for java to enable high-RAM-comsuming processing
# especially in writing large dataset to .xlxs
memory.limit(10240)
options(java.parameters = "-Xmx6048m")
#this option assigns more RAM for java to enable high-RAM-comsuming processing
# especially in writing large dataset to .xlxs
memory.limit(102400)
options(java.parameters = "-Xmx10048m")
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the followiing line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
gene_expr_10h.table <- read.xlsx2('data/10hr_normed_counts.xlsx', sheetName = 'counts', stringsAsFactors = F,
colClasses = c('character', rep('numeric', 16)))
gene_expr_10h.tibble <- as_tibble(gene_expr_10h.table)
#Check all unique
all(!duplicated(gene_expr_10h.tibble[,1]))
#use the geneid as row.names
gene_10h.table_rownames <- data.frame(gene_expr_10h.tibble[,-1], row.names=gene_expr_10h.table[,1])
gene_10h.count_maxtrix <- as.matrix(gene_10h.table_rownames)
gene_10h.count_maxtrix <- round(gene_10h.count_maxtrix)
# make the mode of matrix integer otherwise it will be number
head(gene_10h.count_maxtrix)
gene_10h.coldata <- data.frame(condition = c(rep('blood', 4),
rep('LTB4_TM', 5),
rep('CFASN_TM', 5),
rep('CFASN_inc', 2)),
row.names = colnames(gene_10h.count_maxtrix[,1:16]))
all(rownames(gene_10h.coldata) == colnames(gene_10h.count_maxtrix[1:16]))
#create DESeqDataSet(dds) object, dds is a container for intermediate data
gene_10h.dds <- DESeqDataSetFromMatrix(countData = gene_10h.count_maxtrix[,1:16],
colData = gene_10h.coldata,
design = ~ condition)
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(gene_10h.dds)) >= 10
gene_10h.dds <- gene_10h.dds[keep,]
gene_10h.dds$condition <- factor(gene_10h.dds$condition, levels = c("blood","LTB4_TM",'CFASN_TM', 'CFASN_inc'))
# drop levels that with no sample
gene_10h.dds$condition <- droplevels(gene_10h.dds$condition)
# DEseq analysis
gene_10h.dds <- DESeq(gene_10h.dds)
dds <- gene_10h.dds
normalized_counts <- counts(dds, normalized=TRUE)
gene_name <- read_table(file = 'data/geneset.txt', skip = 2, col_names = 'gene name',
col_types = cols(
`gene name` = col_character()
))
pos <- rownames(normalized_counts) %in% pull(gene_name)
normalized_counts_sub <- normalized_counts[pos,]
write.xlsx2(x = normalized_counts_sub, file = 'output/ts_normalized_counts_sub.xlsx')
normalized_counts <- counts(dds, normalized=TRUE)
gene_name <- read_table(file = 'data/geneset.txt', skip = 2, col_names = 'gene name',
col_types = cols(
`gene name` = col_character()
))
pos <- rownames(normalized_counts) %in% pull(gene_name)
normalized_counts_sub <- normalized_counts[pos,]
write.xlsx2(x = normalized_counts_sub, file = 'output/10h_normalized_counts_sub.xlsx')
source('E:/data/repos/Kinetics/R/kinetics/kinetics_analysis.R', echo=TRUE)
source('E:/data/repos/Kinetics/R/kinetics/kinetics.R', echo=TRUE)
# dds is a reusable name, take care which dds you use
normalized_counts <- counts(dds, normalized=TRUE)
gene_name <- read_table(file = 'data/geneset.txt', skip = 2, col_names = 'gene name',
col_types = cols(
`gene name` = col_character()
))
pos <- rownames(normalized_counts) %in% pull(gene_name)
normalized_counts_sub <- normalized_counts[pos,]
write.xlsx2(x = normalized_counts_sub, file = 'output/ts_normalized_counts_sub.xlsx')
library(tidyverse)
source('E:/data/repos/Kinetics/R/Trblockade_orgin.R', echo=TRUE)
source('E:/data/repos/Kinetics/R/Deff_expr_10h.R', echo=TRUE)
source('E:/data/repos/Kinetics/R/Deff_expr_10h.R', echo=TRUE)
source('E:/data/repos/Kinetics/R/Deff_expr_10h.R', echo=TRUE)
source('E:/data/repos/Kinetics/R/Deff_expr_10h.R', echo=TRUE)
traceback()
res_LTB4_up.unique <- res_LTB4_up.unique[,1:7] %>% select(gene_name, everything())
res_LTB4_up.unique %<>% as_tibble()
res_CFASN_down.unique <- res_CFASN_down.unique[,1:7] %>% select(gene_name, everything())
res_LTB4_up.unique %<>% as_tibble()
res_LTB4_up.unique <- res_LTB4_up.unique[,1:7] %>% select(gene_name, everything())
res_LTB4_up.unique %<>% as_tibble()
library(magrittr)
res_LTB4_up.unique %<>% as_tibble()
res_LTB4_up.unique <- res_LTB4_up.unique[,1:7] %>% select(gene_name, everything())
res_LTB4_up.unique %<>% as_tibble()
res_LTB4_up.unique <- res_LTB4_up.unique[,1:7] %>% select(gene_name, everything())
res_LTB4_up.unique <- res_LTB4_up.unique[,1:7] %>% dplyr::select(gene_name, everything())
res_CFASN_up.unique <- res_CFASN_up.unique[,1:7] %>% dplyr::selectselect(gene_name, everything())
res_CFASN_up.unique <- res_CFASN_up.unique[,1:7] %>% dplyr::select(gene_name, everything())
res_CFASN_up.unique
library(tidyverse)
?select
library(dply)
library(dply)
library(dplyr)
?select
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the followiing line
# BiocManager::install("DESeq2")
library(DESeq2)
library(biomaRt)
library(ggplot2)
library(xlsx)
library(tidyverse)
library(magrittr)
library(dplyr)
library(dplyr)
library(AnnotationDbi)
select()
detach("package:dplyr", unload = TRUE)
library(dplyr)
###! run this before you load any package. If you not, restart your session
#this option assigns more RAM for java to enable high-RAM-comsuming processing
# especially in writing large dataset to .xlxs
#memory.limit(102400)
options(java.parameters = "-Xmx10048m")
# # install necessary package
library(BiocManager)
# if you have install DESeq2, uncomment the followiing line
# BiocManager::install("DESeq2")
library(DESeq2)
library(biomaRt)
library(ggplot2)
library(xlsx)
library(tidyverse)
library(magrittr)
source('E:/data/repos/Kinetics/R/Deff_expr_10h.R', echo=TRUE)
# check unique
all(!(res_LTB4_up.unique$gene_name %in% res_CFASN_up.unique$gene_name))
length(intersc_unique_10_CFASN_up_four_timepoints$gene_name)
intersc_unique_10_CFASN_up_four_timepoints <- res_CFASN_up.unique[res_CFASN_up.unique$gene_name %in% genes_up_intersection,]
