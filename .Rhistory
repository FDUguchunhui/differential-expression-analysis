values=table$Geneid1,
mart = mart,
)
mart <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = 'unseat'
)
mart <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = 'useast'
)
listFilters(mart)
G_list_2 <- getBM(filters= "ensembl_gene_id",
attributes= c("ensembl_gene_id", 'external_gene_name'),
values=table$Geneid1,
mart = mart,
)
head(G_list_2)
write.xlsx2(G_list_2, 'G_list.xlsx')
G_list_2 <- read.table('G_list.xlsx')
G_list_2 <- read.table(file = 'G_list.xlsx', sheet = 1)
G_list_2 <- read.xlsx2(file = 'G_list.xlsx', sheet = 1)
G_list_2 <- read.xlsx2(file = 'G_list.xlsx', sheetIndex = 1)
table_merge <- sqldf::sqldf('select *
from "table"
left join G_list_2 on "table".Geneid1 = G_list_2.ensembl_gene_id')
table_reordered <- table_merge %>%
as_tibble() %>%
dplyr::select(Geneid1, external_gene_name, everything())
#remove useless column
table_reordered <- table_reordered[, c(-3, -19)]
table_reordered$external_gene_name <-
ifelse(is.na(table_reordered$external_gene_name),table_reordered$Geneid1,
table_reordered$external_gene_name)
head(table_reordered)
# correlation analysis
#read in data as tibble
proteomics <- read.xlsx2(file = 'Proteomics.xlsx', sheetName = 'Sheet1', stringsAsFactors = F,
colClasses = c('character', 'character', rep("double", 9))
) %>%
as_tibble()
count_10h <- read.xlsx2(file = '10hr_normed_counts.xlsx', sheetName = 'counts',
colClasses = c('character', rep("double", 16))) %>%
as_tibble()
knitr::opts_chunk$set(echo = TRUE)
# this option assigns more RAM for java to enable high-RAM-comsuming processing
# especially in writing large dataset to .xlxs
rm(list = ls())
memory.limit(102400)
options(java.parameters = "-Xmx10000m")
library(BiocManager)
# if you have install DESeq2, uncomment the followiing line
# BiocManager::install("DESeq2")
library(DESeq2)
library(sqldf)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(xlsx)
library(pheatmap) #for heatmap
library(gplots) #for heatmap
# run next line if you need to get some help from DESeq2
# browseVignettes("DESeq2")
listMarts()
listMarts()
listMarts()
listMarts()
listMarts()
ensembl=useMart("ensembl")
listDatasets(ensembl)
write.xlsx2(genes_upreg_6h, file = 'F:\repos\Kinetics\output\genes_upreg_6h.xlsx')
write.xlsx2(genes_upreg_6h, file = 'F:\\repos\\Kinetics\\output\\genes_upreg_6h.xlsx')
write.xlsx2(G_list_2, file = 'F:\\repos\\Kinetics\\output\\G_list.xlsx')
G_list_2 <- read.xlsx2(file = 'G_list.xlsx', sheetIndex = 1)
write.xlsx2(G_list_2, file = 'F:\\repos\\Kinetics\\output\\G_list.xlsx')
intersc_unique_10_CFASN_up_four_timepoints
library(BiocManager)
# if you have install DESeq2, uncomment the followiing line
# BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(dplyr)
library(ggplot2)
library(xlsx)
# run next line if you need to
memory.limit(102400)
options(java.parameters = "-Xmx6048m")
gene_expr_10h.table <- read.xlsx2('10hr_normed_counts.xlsx', sheetName = 'counts', stringsAsFactors = F,
colClasses = c('character', rep('numeric', 16)))
gene_expr_10h.tibble <- as_tibble(gene_expr_10h.table)
#Check all unique
all(!duplicated(gene_expr_10h.tibble[,1]))
#use the geneid as row.names
gene_10h.table_rownames <- data.frame(gene_expr_10h.tibble[,-1], row.names=gene_expr_10h.table[,1])
gene_10h.count_maxtrix <- as.matrix(gene_10h.table_rownames)
gene_10h.count_maxtrix <- round(gene_10h.count_maxtrix)
# make the mode of matrix integer otherwise it will be number
head(gene_10h.count_maxtrix)
gene_10h.coldata <- data.frame(condition = c(rep('blood', 4),
rep('LTB4_TM', 5),
rep('CFASN_TM', 5)),
row.names = colnames(gene_10h.count_maxtrix[,1:14]))
all(rownames(gene_10h.coldata) == colnames(gene_10h.count_maxtrix[1:14]))
#create DESeqDataSet(dds) object, dds is a container for intermediate data
gene_10h.dds <- DESeqDataSetFromMatrix(countData = gene_10h.count_maxtrix[,1:14],
colData = gene_10h.coldata,
design = ~ condition)
# pre-filtering
# by removing rows in which there are very few reads, we reduce the memory size of the dds data object,
#   and we increase the speed of the transformation and testing functions within DESeq2
keep <- rowSums(counts(gene_10h.dds)) >= 10
gene_10h.dds <- gene_10h.dds[keep,]
# set dds condition with all time points
# set 'blood' as base level, the default base level is determined by alphabet order
# other statement if also available for this purpose
# Caution!: the document only give example for factor with two levels, not sure about accuracy for
#   factor with more than 2 levels
gene_10h.dds$condition <- factor(gene_10h.dds$condition, levels = c("blood","LTB4_TM",'CFASN_TM'))
# drop levels that with no sample
gene_10h.dds$condition <- droplevels(gene_10h.dds$condition)
# DEseq analysis
gene_10h.dds <- DESeq(gene_10h.dds)
# for different condition you just change 6h to i.e. 1h, 2h, 4h
# may can be done by lapply() function, not sure how to set the func argument
# with different arguments
res_LTB4 <- results(gene_10h.dds, contrast=c("condition","LTB4_TM", "blood"))
res_CFASN <- results(gene_10h.dds, contrast=c("condition","CFASN_TM", "blood"))
# this function is used to subset the neeeded gene from RESULT object
#function get those LFC greate than 1 and the adjusted P-value is less than 0.1
res_subgroup <- function(res, alpha=0.1, reg_LFC=1, reg_dir='all'){
# res is an obj from DEseq2.result function
# alpha gives the significant level for adjusted P-value
# reg gives the regulation level change in log2 fold change in absolute value
# reg_dir gives which regulation direction you want to subset you gene
# three options: all -- up and down
#                up  -- only up regulated
#                down -- only down regulated
res_sig_pos <- (res$padj < alpha)
res_sig_pos[is.na(res_sig_pos)] <- F
if(reg_dir == 'all'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC) | (res$log2FoldChange < -reg_LFC)
}
else if(reg_dir == 'up'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC)
}
else if(reg_dir == 'down'){
res_LFC_pos <- (res$log2FoldChange < -reg_LFC)
}
return(res[res_LFC_pos & res_sig_pos,])
}
# this function is used to subset the neeeded gene from RESULT object
#function get those LFC greate than 1 and the adjusted P-value is less than 0.1
res_subgroup <- function(res, alpha=0.1, reg_LFC=1, reg_dir='all'){
# res is an obj from DEseq2.result function
# alpha gives the significant level for adjusted P-value
# reg gives the regulation level change in log2 fold change in absolute value
# reg_dir gives which regulation direction you want to subset you gene
# three options: all -- up and down
#                up  -- only up regulated
#                down -- only down regulated
res_sig_pos <- (res$padj < alpha)
res_sig_pos[is.na(res_sig_pos)] <- F
if(reg_dir == 'all'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC) | (res$log2FoldChange < -reg_LFC)
}
else if(reg_dir == 'up'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC)
}
else if(reg_dir == 'down'){
res_LFC_pos <- (res$log2FoldChange < -reg_LFC)
}
return(res[res_LFC_pos & res_sig_pos,])
}
#upregulated
res_LTB4_up <- as.data.frame(res_subgroup(res_LTB4, reg_dir = 'up'))
res_LTB4_up$gene_name <- row.names(res_LTB4_up)
res_CFASN_up <- as.data.frame(res_subgroup(res_CFASN, reg_dir = 'up'))
res_CFASN_up$gene_name <- row.names(res_CFASN_up)
#down regulated
res_LTB4_down <- as.data.frame(res_subgroup(res_LTB4, reg_dir = 'down'))
res_LTB4_down$gene_name <- row.names(res_LTB4_down)
res_CFASN_down <- as.data.frame(res_subgroup(res_CFASN, reg_dir = 'down'))
res_CFASN_down$gene_name <- row.names(res_CFASN_down)
#write significant up & down regulated genes
write.xlsx2(res_LTB4_up,file = 'res_LTB4_up.xlsx')
write.xlsx2(res_CFASN_up, file = 'res_CFASN_up.xlsx')
write.xlsx2(res_LTB4_down,file = 'res_LTB4_down.xlsx')
write.xlsx2(res_CFASN_down, file = 'res_CFASN_down.xlsx')
# intersection for up and down
res_up_intersection <- sqldf::sqldf('
select *
from res_LTB4_up
inner join res_CFASN_up on
res_LTB4_up.gene_name = res_CFASN_up.gene_name
') %>%   dplyr::select(gene_name, baseMean:padj)
res_down_intersection <- sqldf::sqldf('
select *
from res_LTB4_down
inner join res_CFASN_down on
res_LTB4_down.gene_name = res_CFASN_down.gene_name
') %>%   dplyr::select(gene_name, baseMean:padj)
write.xlsx2(res_up_intersection,file = 'res_up_intersection.xlsx')
write.xlsx2(res_down_intersection,file = 'res_down_intersection.xlsx')
res_LTB4_up.unique <- sqldf::sqldf('
select *
from res_LTB4_up
where res_LTB4_up.gene_name not in (
select res_LTB4_up.gene_name
from res_LTB4_up
inner join res_CFASN_up on
res_LTB4_up.gene_name = res_CFASN_up.gene_name
)
')
res_CFASN_up.unique <- sqldf::sqldf('
select *
from res_CFASN_up
where res_CFASN_up.gene_name not in (
select res_CFASN_up.gene_name
from res_CFASN_up
inner join res_LTB4_up on
res_LTB4_up.gene_name = res_CFASN_up.gene_name
)
')
#dwon regulated
res_LTB4_down.unique <- sqldf::sqldf('
select *
from res_LTB4_down
where res_LTB4_down.gene_name not in (
select res_LTB4_down.gene_name
from res_LTB4_down
inner join res_CFASN_down on
res_LTB4_down.gene_name = res_CFASN_down.gene_name
)
')
res_CFASN_down.unique <- sqldf::sqldf('
select *
from res_CFASN_down
where res_CFASN_down.gene_name not in (
select res_CFASN_down.gene_name
from res_CFASN_down
inner join res_LTB4_down on
res_LTB4_down.gene_name = res_CFASN_down.gene_name
)
')
res_LTB4_up.unique <- res_LTB4_up.unique[,1:7] %>% select(gene_name, everything())
res_CFASN_up.unique <- res_CFASN_up.unique[,1:7] %>% select(gene_name, everything())
#down
res_LTB4_down.unique <- res_LTB4_down.unique[,1:7] %>% select(gene_name, everything())
res_CFASN_down.unique <- res_CFASN_down.unique[,1:7] %>% select(gene_name, everything())
#up
write.xlsx2(res_LTB4_up.unique,file = 'res_LTB4_up_unique.xlsx')
write.xlsx2(res_CFASN_up.unique,file = 'res_CFASN_up_unique.xlsx')
#down regulated
write.xlsx2(res_LTB4_down.unique,file = 'res_LTB4_down_unique.xlsx')
write.xlsx2(res_CFASN_down.unique,file = 'res_CFASN_down_unique.xlsx')
# check unique
all(!(res_LTB4_up.unique$gene_name %in% res_CFASN_up.unique$gene_name))
all(!(res_LTB4_down.unique$gene_name %in% res_CFASN_down.unique$gene_name))
# unique 10h up-regulated with other 4 time points CFASN
length(res_CFASN_up.unique$gene_name)
intersc_unique_10_CFASN_up_four_timepoints <- res_CFASN_up.unique[res_CFASN_up.unique$gene_name %in% genes_up_intersection,]
length(intersc_unique_10_CFASN_up_four_timepoints$gene_name)
write.xlsx2(intersc_unique_10_CFASN_up_four_timepoints, 'intersc_unique_10_CFASN_up_four_timepoints.xlsx')
#make a table with the lfc of 5 time points of up-regulated CFASN
# intersc_unique_10_CFASN_up_four_timepoints.lfc_ts_expr.tibble <- lfc_ts_expr.tibble %>%
#   filter(gene_name %in% intersc_unique_10_CFASN_up_four_timepoints$gene_name)
#
# intersc_unique_10_CFASN_up_four_timepoints.lfc_ts_expr.tibble <- sqldf::sqldf('
#   select
#     "lfc.1h", "lfc.2h", "lfc.4h", "lfc.6h", log2FoldChange as "lfc.10h"
#     from "intersc_unique_10_CFASN_up_four_timepoints.lfc_ts_expr.tibble", "res_CFASN_up.unique"
#     where "intersc_unique_10_CFASN_up_four_timepoints.lfc_ts_expr.tibble".gene_name = "res_CFASN_up.unique".gene_name
# ')
#
#
# write.table(intersc_unique_10_CFASN_up_four_timepoints.lfc_ts_expr.tibble, file = 'intersc_unique_10_CFASN_up_four_timepoints.tsv',
#             quote = F, sep = '\t', row.names = F)
intersc_unique_10_CFASN_up_four_timepoints
intersc_unique_10_CFASN_up_four_timepoints
length(res_CFASN_up.unique$gene_name)
intersc_unique_10_CFASN_up_four_timepoints <- res_CFASN_up.unique[res_CFASN_up.unique$gene_name %in% genes_up_intersection,]
length(intersc_unique_10_CFASN_up_four_timepoints$gene_name)
write.xlsx2(intersc_unique_10_CFASN_up_four_timepoints, 'intersc_unique_10_CFASN_up_four_timepoints.xlsx')
intersc_unique_10_CFASN_up_four_timepoints <- res_CFASN_up.unique[res_CFASN_up.unique$gene_name %in% genes_up_intersection,]
source('F:/repos/Kinetics/kinetics.R', echo=TRUE)
dds <- DESeq(dds)
# for different condition you just change 6h to i.e. 1h, 2h, 4h
# may can be done by lapply() function, not sure how to set the func argument
# with different arguments
res_1h <- results(dds,contrast=c("condition","1h","blood"))
res_2h <- results(dds,contrast=c("condition","2h","blood"))
res_4h <- results(dds,contrast=c("condition","4h","blood"))
res_6h <- results(dds,contrast=c("condition","6h","blood"))
res_subgroup <- function(res, alpha=0.1, reg_LFC=1, reg_dir='all'){
# res is an obj from DEseq2.result function
# alpha gives the significant level for adjusted P-value
# reg gives the regulation level change in log2 fold change in absolute value
# reg_dir gives which regulation direction you want to subset you gene
# three options: all -- up and down
#                up  -- only up regulated
#                down -- only down regulated
res_sig_pos <- (res$padj < alpha)
res_sig_pos[is.na(res_sig_pos)] <- F
if(reg_dir == 'all'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC) | (res$log2FoldChange < -reg_LFC)
}
else if(reg_dir == 'up'){
res_LFC_pos <- (res$log2FoldChange > reg_LFC)
}
else if(reg_dir == 'down'){
res_LFC_pos <- (res$log2FoldChange < -reg_LFC)
}
return(res[res_LFC_pos & res_sig_pos,])
}
#get all 4 upregluated genes
res_list <- list(res_1h = res_1h, res_2h = res_2h, res_4h = res_4h, res_6h = res_6h)
res_list_up <- lapply(res_list, res_subgroup, reg_dir ='up')
#get all 4 downregluated genes
res_list_down <- lapply(res_list, res_subgroup, reg_dir ='down')
# output corresponding excel file
library(xlsx)
# genes that are upregulated
file_up <- paste(getwd(),'/', c("1", '2', '4', '6'), '_up.xlsx', sep="")
for(i in 1:4){
write.xlsx2(res_list_up[i], file = file_up[i], row.names = T)
}
# genes that are downregulated
file_down <- paste(getwd(),'/', c("1", '2', '4', '6'), '_down.xlsx', sep="")
for(i in 1:4){
write.xlsx2(res_list_down[i], file = file_down[i], row.names = T)
}
# plot the MAplot with the subset result
plotMA(res_list_up[[1]], ylim=c(-3,3))
# get the length of the dataset of interest
# following two lines is demo
length(res[(res$log2FoldChange > 1)  & res_sig_pos ,]$baseMean)
length(res[(res$log2FoldChange < -1)  & res_sig_pos ,]$baseMean)
# get the name of downregulated genes
# following demo for 1h
write(file ='F:\\repos\\Kinetics\\output\\gene-downregulated_new.txt',x = row.names(res_list_down[[1]]))
#search for a gene whether in down or up regulation
which(row.names(res_list_up[[1]]) == 'ENSG00000102794')
which(row.names(res_list_down[[1]]) == 'ENSG00000102794')
which(row.names(res) == 'ENSG00000102794')
#plot counts of reads for single gene across groups
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
#transform the data into tibble
#do intersection over all time points with up-regulation
tibble.1h_up <- as_tibble(as.data.frame(res_list_up[['res_1h']]), rownames = 'genes')
tibble.2h_up <- as_tibble(as.data.frame(res_list_up[['res_2h']]), rownames = 'genes')
tibble.4h_up <- as_tibble(as.data.frame(res_list_up[['res_4h']]), rownames = 'genes')
tibble.6h_up <- as_tibble(as.data.frame(res_list_up[['res_6h']]), rownames = 'genes')
genes_up_intersection <- dplyr::intersect(tibble.1h_up$genes, tibble.2h_up$genes) %>%
dplyr::intersect(tibble.4h_up$genes) %>%
dplyr::intersect(tibble.6h_up$genes)
length(genes_up_intersection)
genes_up_intersection.table <- table_nodup[table_nodup$Geneid %in% genes_up_intersection,]
write.xlsx2(genes_intersection.table, 'genes_up_all_time_points_intersection.xlsx')
#do intersection over all time points with down-regulation
tibble.1h_down <- as_tibble(as.data.frame(res_list_down[[1]]), rownames = 'genes')
tibble.2h_down <- as_tibble(as.data.frame(res_list_down[[2]]), rownames = 'genes')
tibble.4h_down <- as_tibble(as.data.frame(res_list_down[[3]]), rownames = 'genes')
tibble.6h_down <- as_tibble(as.data.frame(res_list_down[[4]]), rownames = 'genes')
genes_down_intersection <- dplyr::intersect(tibble.1h_down$genes, tibble.2h_down$genes) %>%
dplyr::intersect(tibble.4h_down$genes) %>%
dplyr::intersect(tibble.6h_down$genes)
length(genes_down_intersection)
write.xlsx2(genes_up_intersection.table, 'genes_up_all_time_points_intersection.xlsx')
#do intersection over all time points with down-regulation
tibble.1h_down <- as_tibble(as.data.frame(res_list_down[[1]]), rownames = 'genes')
tibble.2h_down <- as_tibble(as.data.frame(res_list_down[[2]]), rownames = 'genes')
tibble.4h_down <- as_tibble(as.data.frame(res_list_down[[3]]), rownames = 'genes')
tibble.6h_down <- as_tibble(as.data.frame(res_list_down[[4]]), rownames = 'genes')
genes_down_intersection <- dplyr::intersect(tibble.1h_down$genes, tibble.2h_down$genes) %>%
dplyr::intersect(tibble.4h_down$genes) %>%
dplyr::intersect(tibble.6h_down$genes)
length(genes_down_intersection)
genes_down_intersection.table <- table_nodup[table_nodup$Geneid %in% genes_down_intersection,]
write.xlsx2(genes_down_intersection.table, 'genes_down_all_time_points_intersection.xlsx')
#can be used to check whether the biomart give more gene_name than the original dataset
# length(table$Geneid) length(table_nodup$Geneid)
# sum(grepl(table$Geneid, pattern = 'ENSG00*') == TRUE)
# sum(grepl(table_nodup$Geneid, pattern = 'ENSG00*') == TRUE)
overlap_transcriptome_proteomes <- read.xlsx2('overlap transcriptome proteome.xlsx',
sheetName = 'Sheet1',
header = F,
as.data.frame = T)
length(which(genes_up_intersection %in% overlap_transcriptome_proteomes$X1))
##################### plot
#make the barchart of 4 time point up-regulated gene number
library(ggplot2)
library(tidyr)
dat <- NULL
dat$time <- as.factor(c('1h', '2h', '4h', '6h'))
dat$down <- sapply(res_list_down, nrow)
dat$up <- sapply(res_list_up, nrow)
dat <- as.data.frame(dat)
ggplot(data = dat, aes(time)) +
geom_bar(aes(time , weight = down, fill = 'red'), show.legend = FALSE) +
geom_bar(aes(time , weight = up), show.legend = wFALSE) +
labs(title = "Down regulated genes over time", x = "time", y = "DEGs")
ggplot(data = dat %>% gather(Variable, reg, -time),
aes(x = time, y = reg, fill = Variable)) +
geom_bar(stat = 'identity', position = position_dodge(width = 0.15)) +
geom_line(aes(x = time, y = reg, group = Variable, color = Variable),
stat="identity", show.legend = F) +
geom_point(show.legend = F) +
scale_fill_manual(values=c("black", "grey")) +
labs(title = "Down regulated genes over time", x = "time", y = "DEGs")
##find the top 100 up_reg intersection genes expression of different time point
genes_downreg_1h <- tibble.1h_down[(tibble.1h_down$genes %in% genes_down_intersection), ] %>%
arrange(desc(log2FoldChange))
genes_downreg_2h <- tibble.2h_down[(tibble.2h_down$genes %in% genes_down_intersection), ] %>%
arrange(desc(log2FoldChange))
genes_downreg_4h <- tibble.4h_down[(tibble.4h_down$genes %in% genes_down_intersection), ] %>%
arrange(desc(log2FoldChange))
genes_downreg_6h <- tibble.6h_down[(tibble.6h_down$genes %in% genes_down_intersection), ] %>%
arrange(desc(log2FoldChange))
write.xlsx2(genes_downreg_1h, 'F:\\repos\\Kinetics\\output\\genes_downreg_1h.xlsx')
write.xlsx2(genes_downreg_2h, 'F:\\repos\\Kinetics\\output\\genes_downreg_2h.xlsx')
write.xlsx2(genes_downreg_4h, 'F:\\repos\\Kinetics\\output\\genes_downreg_4h.xlsx')
write.xlsx2(genes_downreg_6h, 'F:\\repos\\Kinetics\\output\\genes_downreg_6h.xlsx')
genes_upreg_1h <- tibble.1h_up[(tibble.1h_up$genes %in% genes_up_intersection), ] %>%
arrange(desc(log2FoldChange))
genes_upreg_2h <- tibble.2h_up[(tibble.2h_up$genes %in% genes_up_intersection), ] %>%
arrange(desc(log2FoldChange))
genes_upreg_4h <- tibble.4h_up[(tibble.4h_up$genes %in% genes_up_intersection), ] %>%
arrange(desc(log2FoldChange))
genes_upreg_6h <- tibble.6h_up[(tibble.6h_up$genes %in% genes_up_intersection), ] %>%
arrange(desc(log2FoldChange))
write.xlsx2(genes_upreg_1h, 'F:\\repos\\Kinetics\\output\\genes_upreg_1h.xlsx')
write.xlsx2(genes_upreg_2h, 'F:\\repos\\Kinetics\\output\\genes_upreg_2h.xlsx')
write.xlsx2(genes_upreg_4h, 'F:\\repos\\Kinetics\\output\\genes_upreg_4h.xlsx')
write.xlsx2(genes_upreg_6h, file = 'F:\\repos\\Kinetics\\output\\genes_upreg_6h.xlsx')
# correlation analysis
proteomics <- read.xlsx2(file = 'Proteomics.xlsx', sheetName = 'Sheet1', stringsAsFactors = F,
colClasses = c('character', 'character', rep("double", 9))
) %>%
as_tibble()
count_10h <- read.xlsx2(file = '10hr_normed_counts.xlsx', sheetName = 'counts',
colClasses = c('character', rep("double", 16))) %>%
as_tibble()
proteomics$GENE.ID <- sapply(proteomics$GENE.ID, sub, pattern = '_HUMAN', replacement = '')
intersc <- intersect(proteomics$GENE.ID, count_10h$ID)
x <- count_10h[count_10h$ID %in% intersc, ] %>%
select(ID,CFASN_TM_1:CFASN_TM_3)
y <- proteomics[proteomics$GENE.ID %in% intersc,] %>%
select(GENE.ID,CFASN_1:CFASN_3)
intersc.up <- as.list(read.xlsx2('overlap transcriptome proteome.xlsx', header = F,
sheetIndex = 1, stringsAsFactors = F))
##get the correaltions of transcriptomics and proteinomics of intersection genes
# Initiate data frame of correlation results
correlations <- data.frame(matrix(NA, nrow=length(x$ID), ncol=6))
# Assign the first column as the protein names and their site (B2/B4) subset
correlations[ ,1] <- x[,1]
# Assign column names
colnames(correlations) <- c("gene", "Sample Size", "Pearson CC", "Pearson P-Value",
"Spearman Rho", "Spearman P-Value")
for (i in 1:nrow(correlations)) {
cor.pearson <- cor.test(as.numeric(x[i,][,2:4]), as.numeric(y[i,][,2:4]))
cor.spearman <- cor.test(as.numeric(x[i,][,2:4]), as.numeric(y[i,][,2:4]), method = 'spearman')
#Col 2. Sample size
correlations[i,2] <- as.integer(cor.pearson$parameter) + 2
#Col 3. pcc
correlations[i,3] <- as.numeric(cor.pearson$estimate)
#Col 4. pcc p-value
correlations[i,4] <- as.numeric(cor.pearson$p.value)
#Col 6. spearman's rho
correlations[i,5] <- as.numeric(cor.spearman$estimate )
#Col 7. spearman's rho p-value
correlations[i,6] <- as.numeric(cor.spearman$p.value )
}
plot(correlations$`Pearson CC`, pch = 16, cex = 0.5)
#get the correaltions of all_time intersection genes
x <- count_10h[count_10h$ID %in% intersc.up$X1, ] %>%
select(ID,CFASN_TM_1:CFASN_TM_3)
y <- proteomics[proteomics$GENE.ID %in% intersc.up$X1,] %>%
select(GENE.ID,CFASN_1:CFASN_3)
# Initiate data frame of correlation results
intersc_up.correlations <- data.frame(matrix(NA, nrow=length(x$ID), ncol=6))
# Assign the first column as the protein names and their site (B2/B4) subset
intersc_up.correlations[ ,1] <- x[,1]
# Assign column names
colnames(intersc_up.correlations) <- c("gene", "Sample Size", "Pearson CC", "Pearson P-Value",
"Spearman Rho", "Spearman P-Value")
for (i in 1:nrow(intersc_up.correlations)) {
cor.pearson <- cor.test(as.numeric(x[i,][,2:4]), as.numeric(y[i,][,2:4]))
cor.spearman <- cor.test(as.numeric(x[i,][,2:4]), as.numeric(y[i,][,2:4]),
method = 'spearman')
#Col 2. Sample size
intersc_up.correlations[i,2] <- as.integer(cor.pearson$parameter) + 2
#Col 3. pcc
intersc_up.correlations[i,3] <- as.numeric(cor.pearson$estimate)
#Col 4. pcc p-value
intersc_up.correlations[i,4] <- as.numeric(cor.pearson$p.value)
#Col 6. spearman's rho
intersc_up.correlations[i,5] <- as.numeric(cor.spearman$estimate )
#Col 7. spearman's rho p-value
intersc_up.correlations[i,6] <- as.numeric(cor.spearman$p.value )
}
barplot(intersc_up.correlations[intersc_up.correlations$`Pearson P-Value` < 0.05, ]$`Pearson CC`)
intersc_up.correlations[intersc_up.correlations$`Pearson P-Value` < 0.05, ] %>%
arrange(`Pearson P-Value`) %>%
write.xlsx2(file = 'proteinomics-transcriptomic-up-pearson-significant.xlsx')
unique 10h up-regulated with other 4 time points CFASN
length(res_CFASN_up.unique$gene_name)
intersc_unique_10_CFASN_up_four_timepoints <- res_CFASN_up.unique[res_CFASN_up.unique$gene_name %in% genes_up_intersection,]
length(intersc_unique_10_CFASN_up_four_timepoints$gene_name)
write.xlsx2(intersc_unique_10_CFASN_up_four_timepoints, 'intersc_unique_10_CFASN_up_four_timepoints.xlsx')
save.image()
savehistory()
